import org.apache.tools.ant.taskdefs.condition.Os

task build (type: Exec) {
	def version = getMercurialVersion()

	println "Building version: " + version

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    	commandLine 'docbuilder.bat'
	}
	else {
		commandLine 'docbuilder'
	}

	def version_option = "version=" + version

	args = ['--c', version_option, '--o', './build', '--s', './manual']
}

//
// methods for creating version number from Mercurial repositories
//
def archivalMercurialVersion() {
	def data = [:]

	def file = new File (".hg_archival.txt")
	file.eachLine { line ->
		def elements = line.split (":")
		data[elements[0].trim()] = elements[1].trim()
	}

	if (data["tag"]) {
		return data["tag"]
	}
	else if (data["latesttag"]) {
		return data["latesttag"] + "+" + data["latesttagdistance"] + "-" + data["node"][0..11]
	}
	else {
		return data["node"][0..11]
	}
}

def captureOutput (command) {
	def output = []

	def process = command.execute()
	process.in.eachLine  {line -> output << line}
	process.err.eachLine {line -> println "ERR: " + line}
	process.waitFor()

	return output
}

def liveMercurialVersion() {
	def hgId = captureOutput ("hg id -i")[0]
	def tag  = captureOutput ("hg log -r . --template {tags}")[0].split(" ")[0]

	def version
	if (tag =~ /^[0-9]/) {
		version = tag

		// propagate the dirty flag if necessary
		if (hgId =~ /\+$/) {
			version += "+"
		}
	}
	else {
		version = captureOutput ("hg parents --template {latesttag}+{latesttagdistance}-")[0]
		if (!version) {
			version = "null"
		}
		version += hgId

		if (hgId =~ /\+$/) {
			version += String.format("%tY%<tm%<td", new GregorianCalendar())
		}
	}

	return version
}

def getMercurialVersion() {
	println "Calculating Mercurial version number"

	if (new File (".hg").exists()) {
		println "Live Mercurial repository found"
		return liveMercurialVersion()
	}
	else if (new File (".hg_archival.txt").exists()) {
		println "Mercurial repository archive found"
		return archivalMercurialVersion()
	}
	else {
		println "Not a Mercurial repository"
		return "UNKNOWN"
	}
}

